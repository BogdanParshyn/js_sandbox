Promise
        Promise (обычно их так и называют «промисы») – предоставляют удобный способ организации асинхронного кода.

        Promise – это специальный объект, который содержит своё состояние. Вначале pending («ожидание»), 
        затем – одно из: fulfilled («выполнено успешно») или rejected («выполнено с ошибкой»).

        На promise можно навешивать коллбэки двух типов:
                - onFulfilled – срабатывают, когда promise в состоянии «выполнен успешно».
                - onRejected – срабатывают, когда promise в состоянии «выполнен с ошибкой».

        Способ использования, в общих чертах, такой:
                1.Код, которому надо сделать что-то асинхронно, создаёт объект promise и возвращает его.
                2.Внешний код, получив promise, навешивает на него обработчики.
                3.По завершении процесса асинхронный код переводит promise в состояние fulfilled (с результатом) или rejected 
                (с ошибкой). При этом автоматически вызываются соответствующие обработчики во внешнем коде.

        Синтаксис создания Promise:
                        var promise = new Promise(function(resolve, reject) {
                                // Эта функция будет вызвана автоматически

                                // В ней можно делать любые асинхронные операции,
                                // А когда они завершатся — нужно вызвать одно из:
                                // resolve(результат) при успешном выполнении
                                // reject(ошибка) при ошибке
                        })
                
                .then - Универсальный метод для навешивания обработчиков:
                        promise.then(onFulfilled, onRejected)
                                - onFulfilled – функция, которая будет вызвана с результатом при resolve.
                                - onRejected – функция, которая будет вызвана с ошибкой при reject.

                С его помощью можно назначить как оба обработчика сразу, так и только один:
                                // onFulfilled сработает при успешном выполнении
                                promise.then(onFulfilled)
                                // onRejected сработает при ошибке
                                promise.then(null, onRejected)

                .catch
                        Для того, чтобы поставить обработчик только на ошибку, вместо .then(null, onRejected) можно написать
                        .catch(onRejected) – это то же самое.

        Пример с setTimeout:
                                'use strict';

                                // Создаётся объект promise
                                let promise = new Promise((resolve, reject) => {

                                   setTimeout(() => {
                                      // переведёт промис в состояние fulfilled с результатом "result"
                                      resolve("result");
                                   }, 1000);

                                });

                                // promise.then навешивает обработчики на успешный результат или ошибку
                                promise
                                   .then(
                                      result => {
                                         // первая функция-обработчик - запустится при вызове resolve
                                         alert("Fulfilled: " + result); // result - аргумент resolve
                                      },
                                      error => {
                                         // вторая функция - запустится при вызове reject
                                         alert("Rejected: " + error); // error - аргумент reject
                                      }
                                   );


                                // Этот promise завершится с ошибкой через 1 секунду
                                var promise = new Promise((resolve, reject) => {

                                        setTimeout(() => {
                                                reject(new Error("время вышло!"));
                                        }, 1000);

                                });

                                promise
                                        .then(
                                                result => alert("Fulfilled: " + result),
                                                error => alert("Rejected: " + error.message) // Rejected: время вышло!
                                        );
        Только один аргумент
                Функции resolve/reject принимают ровно один аргумент – результат/ошибку.
                Именно он передаётся обработчикам в .then, как можно видеть в примерах выше.
// ========================================================================================================= //

        Promise после reject/resolve – неизменны
                Заметим, что после вызова resolve/reject промис уже не может «передумать».
                Когда промис переходит в состояние «выполнен» – с результатом (resolve) или ошибкой (reject) – это навсегда.
                        'use strict';

                        let promise = new Promise((resolve, reject) => {

                                // через 1 секунду готов результат: result
                                setTimeout(() => resolve("result"), 1000);

                                // через 2 секунды — reject с ошибкой, он будет проигнорирован
                                setTimeout(() => reject(new Error("ignored")), 2000);

                        });

                        promise
                                .then(
                                        result => alert("Fulfilled: " + result), // сработает
                                        error => alert("Rejected: " + error) // не сработает
                                );

                И наоборот:
                        'use strict';

                        let promise = new Promise((resolve, reject) => {

                                // reject вызван раньше, resolve будет проигнорирован
                                setTimeout(() => reject(new Error("error")), 1000);

                                setTimeout(() => resolve("ignored"), 2000);

                        });

                        promise
                                .then(
                                        result => alert("Fulfilled: " + result), // не сработает
                                        error => alert("Rejected: " + error) // сработает
                                );
// ========================================================================================================= //

        Промисификация
                Промисификация – это когда берут асинхронный функционал и делают для него обёртку, возвращающую промис.
                После промисификации использование функционала зачастую становится гораздо удобнее.
                В качестве примера сделаем такую обёртку для запросов при помощи XMLHttpRequest.

                Функция httpGet(url) будет возвращать промис, который при успешной загрузке данных с url будет переходить 
                в fulfilled с этими данными, а при ошибке – в rejected с информацией об ошибке:
                        function httpGet(url) {

                                return new Promise(function(resolve, reject) {

                                        var xhr = new XMLHttpRequest();
                                        xhr.open('GET', url, true);

                                        xhr.onload = function() {
                                                if (this.status == 200) {
                                                        resolve(this.response);
                                                } else {
                                                        var error = new Error(this.statusText);
                                                        error.code = this.status;
                                                        reject(error);
                                                }
                                        };

                                        xhr.onerror = function() {
                                                reject(new Error("Network Error"));
                                        };

                                        xhr.send();
                                });

                        }
                        httpGet("/article/promise/user.json")
                                .then(
                                        response => alert(`Fulfilled: ${response}`),
                                        error => alert(`Rejected: ${error}`)
                                );
                Как видно, внутри функции объект XMLHttpRequest создаётся и отсылается как обычно, при onload/onerror вызываются, 
                соответственно, resolve (при статусе 200) или reject.


        Метод fetch
                Заметим, что ряд современных браузеров уже поддерживает fetch – новый встроенный метод для AJAX-запросов, 
                призванный заменить XMLHttpRequest. Он гораздо мощнее, чем httpGet. И – да, этот метод использует промисы. 
                Полифилл для него доступен на https://github.com/github/fetch.
// ========================================================================================================= //

        Цепочки промисов        
                «Чейнинг» (chaining), то есть возможность строить асинхронные цепочки из промисов – пожалуй, основная причина, 
                из-за которой существуют и активно используются промисы.

                Например, мы хотим по очереди:
                        - Загрузить данные посетителя с сервера (асинхронно).
                        - Затем отправить запрос о нём на github (асинхронно).
                        - Когда это будет готово, вывести его github-аватар на экран (асинхронно).
                        - …И сделать код расширяемым, чтобы цепочку можно было легко продолжить.
                        Вот код для этого, использующий функцию httpGet, описанную выше:
                                'use strict';

                                // сделать запрос
                                httpGet('/article/promise/user.json')
                                        // 1. Получить данные о пользователе в JSON и передать дальше
                                        .then(response => {
                                                console.log(response);
                                                let user = JSON.parse(response);
                                                return user;
                                        })
                                        // 2. Получить информацию с github
                                        .then(user => {
                                                console.log(user);
                                                return httpGet(`https://api.github.com/users/${user.name}`);
                                        })
                                        // 3. Вывести аватар на 3 секунды (можно с анимацией)
                                        .then(githubUser => {
                                                console.log(githubUser);
                                                githubUser = JSON.parse(githubUser);

                                                let img = new Image();
                                                img.src = githubUser.avatar_url;
                                                img.className = "promise-avatar-example";
                                                document.body.appendChild(img);

                                                setTimeout(() => img.remove(), 3000); // (*)
                                        });
                                Самое главное в этом коде – последовательность вызовов:
                                httpGet(...)
                                        .then(...)
                                        .then(...)
                                        .then(...)
                        При чейнинге, то есть последовательных вызовах .then…then…then, в каждый следующий then переходит 
                        результат от предыдущего. Вызовы console.log оставлены, чтобы при запуске можно было посмотреть 
                        конкретные значения, хотя они здесь и не очень важны.

                        Если очередной then вернул промис, то далее по цепочке будет передан не сам этот промис, а его результат.

                        В коде выше:
                                - Функция в первом then возвращает «обычное» значение user. Это значит, что then 
                                  возвратит промис в состоянии «выполнен» с user в качестве результата. Он станет аргументом 
                                  в следующем then.
                                - Функция во втором then возвращает промис (результат нового вызова httpGet). Когда он будет 
                                  завершён (может пройти какое-то время), то будет вызван следующий then с его результатом.
                                - Третий then ничего не возвращает.

                        Если then возвращает промис, то до его выполнения может пройти некоторое время, оставшаяся часть цепочки 
                        будет ждать.

                        То есть, логика довольно проста:
                                - В каждом then мы получаем текущий результат работы.
                                - Можно его обработать синхронно и вернуть результат (например, применить JSON.parse). 
                                  Или же, если нужна асинхронная обработка – инициировать её и вернуть промис.
                        Обратим внимание, что последний then в нашем примере ничего не возвращает. Если мы хотим, чтобы после 
                        setTimeout (*) асинхронная цепочка могла быть продолжена, то последний then тоже должен вернуть промис. 
                        Это общее правило: если внутри then стартует новый асинхронный процесс, то для того, чтобы оставшаяся 
                        часть цепочки выполнилась после его окончания, мы должны вернуть промис.
                        В данном случае промис должен перейти в состояние «выполнен» после срабатывания setTimeout.
                        Строку (*) для этого нужно переписать так:
                                .then(githubUser => {
                                        ...

                                // вместо setTimeout(() => img.remove(), 3000); (*)

                                        return new Promise((resolve, reject) => {
                                                setTimeout(() => {
                                                        img.remove();
                                                        // после таймаута — вызов resolve,
                                                        // можно без результата, чтобы управление перешло в следующий then
                                                        // (или можно передать данные пользователя дальше по цепочке)
                                                        resolve();
                                                }, 3000);
                                        });
                                })
                        Теперь, если к цепочке добавить ещё then, то он будет вызван после окончания setTimeout.
// ========================================================================================================= //

        Перехват ошибок
                При возникновении ошибки – она отправляется в ближайший обработчик onRejected.
                Такой обработчик нужно поставить через второй аргумент .then(..., onRejected) или, что то же самое, через .catch(onRejected).
                Чтобы поймать всевозможные ошибки, которые возникнут при загрузке и обработке данных, добавим catch в конец нашей цепочки:
                                'use strict';

                                // в httpGet обратимся к несуществующей странице
                                httpGet('/page-not-exists')
                                        .then(response => JSON.parse(response))
                                        .then(user => httpGet(`https://api.github.com/users/${user.name}`))
                                        .then(githubUser => {
                                                githubUser = JSON.parse(githubUser);

                                                let img = new Image();
                                                img.src = githubUser.avatar_url;
                                                img.className = "promise-avatar-example";
                                                document.body.appendChild(img);

                                                return new Promise((resolve, reject) => {
                                                        setTimeout(() => {
                                                                img.remove();
                                                                resolve();
                                                        }, 3000);
                                                });
                                        })
                                        .catch(error => {
                                                alert(error); // Error: Not Found
                                        });
                В примере выше ошибка возникает в первом же httpGet, но catch с тем же успехом поймал бы ошибку во втором httpGet 
                или в JSON.parse.

                А что после catch?
                Обработчик .catch(onRejected) получает ошибку и должен обработать её.

                Есть два варианта развития событий:
                        - Если ошибка не критичная, то onRejected возвращает значение через return, и управление переходит 
                          в ближайший .then(onFulfilled).
                        - Если продолжить выполнение с такой ошибкой нельзя, то он делает throw, и тогда ошибка переходит в 
                          следующий ближайший .catch(onRejected).
// ========================================================================================================= //

        Параллельное выполнение
                Что, если мы хотим осуществить несколько асинхронных процессов одновременно и обработать их результат?
                В классе Promise есть следующие статические методы.

        Promise.all(iterable)
                Вызов Promise.all(iterable) получает массив (или другой итерируемый объект) промисов и возвращает промис, 
                который ждёт, пока все переданные промисы завершатся, и переходит в состояние «выполнено» с массивом их 
                результатов.
                        Promise.all([
                                httpGet('/article/promise/user.json'),
                                httpGet('/article/promise/guest.json')
                        ]).then(results => {
                                alert(results);
                        });
                Допустим, у нас есть массив с URL.
                        let urls = [
                                '/article/promise/user.json',
                                '/article/promise/guest.json'
                        ];
                Чтобы загрузить их параллельно, нужно:
                        - Создать для каждого URL соответствующий промис.
                        - Обернуть массив таких промисов в Promise.all.
                Получится так:
                        'use strict';

                        let urls = [
                                '/article/promise/user.json',
                                '/article/promise/guest.json'
                        ];

                        Promise.all( urls.map(httpGet) )
                                .then(results => {
                                        alert(results);
                                });
                Заметим, что если какой-то из промисов завершился с ошибкой, то результатом Promise.all будет эта ошибка. 
                При этом остальные промисы игнорируются.
                        Promise.all([
                                httpGet('/article/promise/user.json'),
                                httpGet('/article/promise/guest.json'),
                                httpGet('/article/promise/no-such-page.json') // (нет такой страницы)
                        ]).then(
                                result => alert("не сработает"),
                                error => alert("Ошибка: " + error.message) // Ошибка: Not Found
                          )

        Promise.race(iterable)
                Вызов Promise.race, как и Promise.all, получает итерируемый объект с промисами, которые нужно выполнить, 
                и возвращает новый промис.

                Но, в отличие от Promise.all, результатом будет только первый успешно выполнившийся промис из списка. 
                Остальные игнорируются.
                        Promise.race([
                                httpGet('/article/promise/user.json'),
                                httpGet('/article/promise/guest.json')
                        ]).then(firstResult => {
                                firstResult = JSON.parse(firstResult);
                                alert( firstResult.name ); // iliakan или guest, смотря что загрузится раньше
                        });
        
        Promise.resolve(value)
                Вызов Promise.resolve(value) создаёт успешно выполнившийся промис с результатом value. Он аналогичен конструкции:
                        new Promise((resolve) => resolve(value))
                Promise.resolve используют, когда хотят построить асинхронную цепочку, и начальный результат уже есть.
                        Promise.resolve(window.location) // начать с этого значения
                                .then(httpGet) // вызвать для него httpGet
                                .then(alert) // и вывести результат

        Promise.reject(error)
                Аналогично Promise.reject(error) создаёт уже выполнившийся промис, но не с успешным результатом, 
                а с ошибкой error.
                        Promise.reject(new Error("..."))
                          .catch(alert) // Error: ...