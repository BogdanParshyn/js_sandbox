Функции

                function showMessage() {
                        alert( 'Привет всем присутствующим!' );
                }
        Вначале идет ключевое слово function, после него имя функции, затем список параметров в скобках 
        (в примере выше он пустой) и тело функции – код, который выполняется при её вызове.

        Объявленная функция доступна по имени,
                function showMessage() {
                        alert( 'Привет всем присутствующим!' );
                }

                showMessage();
                showMessage();
        Главная цель создания функций: избавление от дублирования кода.      
// ========================================================================================================= // 

        Локальные переменные
                Функция может содержать локальные переменные, объявленные через var. Такие переменные видны только внутри функции.
                        function showMessage() {
                                var message = 'Привет, я - Вася!'; // локальная переменная

                                alert( message );
                        }

                        showMessage(); // 'Привет, я - Вася!'
                        alert( message ); // <-- будет ошибка, т.к. переменная видна только внутри
                
                Блоки if/else, switch, for, while, do..while не влияют на область видимости переменных.

                Неважно, где именно в функции и сколько раз объявляется переменная. Любое объявление срабатывает один раз 
                и распространяется на всю функцию.
// ========================================================================================================= //    
        
        Внешние переменные
                Функция может обратиться ко внешней переменной, например:
                        var userName = 'Вася';

                        function showMessage() {
                                var message = 'Привет, я ' + userName;
                                alert(message);
                        }

                        showMessage(); // Привет, я Вася
                
                Доступ возможен не только на чтение, но и на запись. При этом, так как переменная внешняя, 
                то изменения будут видны и снаружи функции:
                        var userName = 'Вася';

                        function showMessage() {
                                userName = 'Петя'; // (1) присвоение во внешнюю переменную

                                var message = 'Привет, я ' + userName;
                                alert( message );
                        }

                        showMessage();

                        alert( userName ); // Петя, значение внешней переменной изменено функцией
                Переменные, объявленные на уровне всего скрипта, называют «глобальными переменными».
                В примере выше переменная userName – глобальная.
// ========================================================================================================= //   
        Параметры
                При вызове функции ей можно передать данные, которые та использует по своему усмотрению.
                        function showMessage(from, text) { // параметры from, text

                                from = "** " + from + " **"; // здесь может быть сложный код оформления

                                alert(from + ': ' + text);
                        }

                        showMessage('Маша', 'Привет!');
                        showMessage('Маша', 'Как дела?');
                Параметры копируются в локальные переменные функции.
                Например, в коде ниже есть внешняя переменная from, значение которой при запуске функции копируется в параметр 
                функции с тем же именем. Далее функция работает уже с параметром:
                        function showMessage(from, text) {
                                from = '**' + from + '**'; // меняем локальную переменную from
                                alert( from + ': ' + text );
                        }

                        var from = "Маша";

                        showMessage(from, "Привет");

                        alert( from ); // старое значение from без изменений, в функции была изменена копия
// ========================================================================================================= //   
 
        Аргументы по умолчанию
                Функцию можно вызвать с любым количеством аргументов.
                Если параметр не передан при вызове – он считается равным undefined.
                функцию показа сообщения showMessage(from, text) можно вызвать с одним аргументом:
                        showMessage("Маша");
                
                При этом можно проверить, и если параметр не передан – присвоить ему значение «по умолчанию»:
                        function showMessage(from, text) {
                                if (text === undefined) {
                                        text = 'текст не передан';
                                }

                                alert( from + ": " + text );
                        }

                        showMessage("Маша", "Привет!"); // Маша: Привет!
                        showMessage("Маша"); // Маша: текст не передан

                При объявлении функции необязательные аргументы, как правило, располагают в конце списка.
                Для указания значения «по умолчанию», то есть, такого, которое используется, если аргумент не указан, 
                используется два способа:
                        1 - Можно проверить, равен ли аргумент undefined, и если да – то записать в него значение по умолчанию. 
                            Этот способ продемонстрирован в примере выше.
                        2 - Использовать оператор ||:
                                function showMessage(from, text) {
                                        text = text || 'текст не передан';

                                        ...
                                }
                        Второй способ считает, что аргумент отсутствует, если передана пустая строка, 0, или вообще любое значение, 
                        которое в логическом контексте является false

                Если аргументов передано больше, чем надо, например showMessage("Маша", "привет", 1, 2, 3), то ошибки не будет. 
                Но, чтобы получить такие «лишние» аргументы, нужно будет прочитать их из специального объекта arguments, 
                который мы рассмотрим в главе Псевдомассив аргументов "arguments".

// ========================================================================================================= //          
        Возврат значения
                Функция может возвратить результат, который будет передан в вызвавший её код.
                                function calcD(a, b, c) {
                                        return b*b - 4*a*c;
                                }

                                var test = calcD(-4, 2, 1);
                                alert(test); // 20
                        Для возврата значения используется директива return.
                        Она может находиться в любом месте функции. 
                        Как только до неё доходит управление – функция завершается и значение передается обратно.

                        Вызовов return может быть и несколько, например:
                                function checkAge(age) {
                                        if (age > 18) {
                                                return true;
                                        } else {
                                                return confirm('Родители разрешили?');
                                        }
                                }

                                var age = prompt('Ваш возраст?');

                                if (checkAge(age)) {
                                        alert( 'Доступ разрешен' );
                                } else {
                                        alert( 'В доступе отказано' );
                                }
                        
                        Директива return может также использоваться без значения, чтобы прекратить выполнение и выйти из функции.
                                function showMovie(age) {
                                        if (!checkAge(age)) {
                                                return;
                                        }

                                        alert( "Фильм не для всех" ); // (*)
                                        // ...
                                }
                        В коде выше, если сработал if, то строка (*) и весь код под ней никогда не выполнится, 
                        так как return завершает выполнение функции.

                Значение функции без return и с пустым return
                В случае, когда функция не вернула значение или return был без аргументов, считается что она вернула undefined:
                                function doNothing() { /* пусто */ }
                                
                                alert( doNothing() ); // undefined

                        return без аргумента:
                                function doNothing() {
                                        return;
                                }

                                alert( doNothing() === undefined ); // true
// ========================================================================================================= //  
        
        Выбор имени функции
                Имя функции следует тем же правилам, что и имя переменной. Основное отличие – оно должно быть глаголом, 
                т.к. функция – это действие.

                Функции, которые начинаются с "show" – что-то показывают:
                        showMessage(..)     // префикс show, "показать" сообщение

                Функции, начинающиеся с "get" – получают, и т.п.:
                        getAge(..)          // get, "получает" возраст
                        calcD(..)           // calc, "вычисляет" дискриминант
                        createForm(..)      // create, "создает" форму
                        checkPermission(..) // check, "проверяет" разрешение, возвращает true/false

                Одна функция – одно действие
                Функция должна делать только то, что явно подразумевается её названием. И это должно быть одно действие.

                …Но самое главное – в функции не должно быть ничего, кроме самого действия и поддействий, неразрывно связанных 
                с ним.
// ========================================================================================================= //   
// ========================================================================================================= //   

Именованные функциональные выражения
                Специально для работы с рекурсией в JavaScript существует особое расширение функциональных выражений, 
                которое называется «Named Function Expression» (сокращённо NFE) или, по-русски, 
                «именованное функциональное выражение».

        Named Function Expression
                Обычное функциональное выражение:
                        var f = function(...) { /* тело функции */ };
                
                Именованное с именем sayHi:
                        var f = function sayHi(...) { /* тело функции */ };
                Имя функционального выражения (sayHi) имеет особый смысл. Оно доступно только изнутри самой функции (f).
                        var f = function sayHi(name) {
                                alert( sayHi ); // изнутри функции - видно (выведет код функции)
                        };

                        alert( sayHi ); // снаружи - не видно (ошибка: undefined variable 'sayHi')
                
                Кроме того, имя NFE нельзя перезаписать:
                        var test = function sayHi(name) {
                                sayHi = "тест"; // попытка перезаписи
                                alert( sayHi ); // function... (перезапись не удалась)
                        };

                        test();
                В режиме use strict код выше выдал бы ошибку.

        Как правило, имя NFE используется для единственной цели – позволить изнутри функции вызвать саму себя.

        NFE используется в первую очередь в тех ситуациях, когда функцию нужно передавать в другое место кода 
        или перемещать из одной переменной в другую.

        Внутреннее имя позволяет функции надёжно обращаться к самой себе, где бы она ни находилась.

        Пример использования
                Внутреннее имя позволяет функции надёжно обращаться к самой себе, где бы она ни находилась.
                        function f(n) {
                                return n ? n * f(n - 1) : 1;
                        };

                        alert( f(5) ); // 120
                В данном случае она замыкается и мы получаем n * на вызванныю функцию * на вызванную функцию * ...., 
                пока не будет false в условии.

                Попробуем перенести её в другую переменную g:
                        function f(n) {
                                return n ? n * f(n - 1) : 1;
                        };

                        var g = f;
                        f = null;

                        alert( g(5) ); // запуск функции с новым именем - ошибка при выполнении!
                Ошибка возникла потому что функция из своего кода обращается к своему старому имени f. 
                А этой функции уже нет, f = null.

                Для того, чтобы функция всегда надёжно работала, объявим её как Named Function Expression:
                        var f = function factorial(n) {
                                return n ? n*factorial(n-1) : 1;
                        };

                        var g = f;  // скопировали ссылку на функцию-факториал в g
                        f = null;

                        alert( g(5) ); // 120, работает!
                
                



        