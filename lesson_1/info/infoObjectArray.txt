Объекты как ассоциативные массивы
        Объекты в JavaScript сочетают в себе два важных функционала.

                Первый – это ассоциативный массив: структура, пригодная для хранения любых данных. 
                В этой главе мы рассмотрим использование объектов именно как массивов.

                Второй – языковые возможности для объектно-ориентированного программирования. Эти возможности мы изучим 
                в последующих разделах учебника.
// ========================================================================================================= // 

        Ассоциативные массивы – структура данных, в которой можно хранить любые данные в формате ключ-значение.

        Создание объектов
                Пустой объект («пустой шкаф») может быть создан одним из двух синтаксисов:
                        o = new Object(); // (1)
                        o = {}; // пустые фигурные скобки (2)
                Обычно все пользуются синтаксисом (2), т.к. он короче.

        Операции с объектом
                Объект может содержать в себе любые значения, которые называются свойствами объекта. Доступ к свойствам 
                осуществляется по имени свойства (иногда говорят «по ключу»).   
                        var person = {}; // пока пустой
                
                Основные операции с объектами – это создание, получение и удаление свойств.
        Для обращения к свойствам используется запись «через точку», вида объект.свойство:
                        // при присвоении свойства в объекте автоматически создаётся "ящик"
                        // с именем "name" и в него записывается содержимое 'Вася'
                        person.name = 'Вася';

                        person.age = 25; // запишем ещё одно свойство: с именем 'age' и значением 25

                Чтобы прочитать их – также обратимся через точку:
                        alert( person.name + ': ' + person.age ); // "Вася: 25"

        Удаление осуществляется оператором delete:
                        delete person.age;

                Иногда бывает нужно проверить, есть ли в объекте свойство с определенным ключом.
        Для этого есть особый оператор: "in".
                Его синтаксис: "prop" in obj, причем имя свойства – в виде строки
                        if ("name" in person) {
                                alert( "Свойство name существует!" );
                        }

                Впрочем, чаще используется другой способ – сравнение значения с undefined.
                Дело в том, что в JavaScript можно обратиться к любому свойству объекта, даже если его нет. Ошибки не будет.
                Но если свойство не существует, то вернется специальное значение undefined:     
                        var person = {};

                        alert( person.lalala ); // undefined, нет свойства с ключом lalala
                Таким образом мы можем легко проверить существование свойства – получив его и сравнив с undefined:
                        var person = {
                                name: "Василий"
                        };

                        alert( person.lalala === undefined ); // true, свойства нет
                        alert( person.name === undefined ); // false, свойство есть.
                
                Разница между проверками in и === undefined
                Они почти идентичны, но есть одна небольшая разница.
                Дело в том, что технически возможно, что свойство есть, а его значением является undefined:
                        var obj = {};
                        obj.test = undefined; // добавили свойство со значением undefined

                        // проверим наличие свойств test и заведомо отсутствующего blabla
                        alert( obj.test === undefined ); // true
                        alert( obj.blabla === undefined ); // true
                …При этом, как видно из кода, при простом сравнении наличие такого свойства будет неотличимо от его отсутствия.
                Но оператор in гарантирует правильный результат:
                        var obj = {};
                        obj.test = undefined;

                        alert( "test" in obj ); // true
                        alert( "blabla" in obj ); // false

        Доступ через квадратные скобки
                Существует альтернативный синтаксис работы со свойствами, использующий квадратные скобки объект['свойство']:
                        var person = {};
                        person['name'] = 'Вася'; // то же что и person.name = 'Вася'

                Записи person['name'] и person.name идентичны, но квадратные скобки позволяют использовать 
                в качестве имени свойства любую строку:
                        var person = {};
                        person['любимый стиль музыки'] = 'Джаз';
                
                Такое присвоение было бы невозможно «через точку», так интерпретатор после первого пробела подумает, 
                что свойство закончилось, и далее выдаст ошибку:
                        person.любимый стиль музыки = 'Джаз'; // ??? ошибка

                В обоих случаях, имя свойства обязано быть строкой. Если использовано значение другого типа – JavaScript 
                приведет его к строке автоматически.

        Доступ к свойству через переменную
                Квадратные скобки также позволяют обратиться к свойству, имя которого хранится в переменной:
                        var person = {};
                        person.age = 25;
                        var key = 'age';

                        alert( person[key] ); // выведет person['age']

        Объявление со свойствами
                Объект можно заполнить значениями при создании, указав их в фигурных скобках: 
                { ключ1: значение1, ключ2: значение2, ... }.
                Такой синтаксис называется литеральным (англ. literal).
                Следующие два фрагмента кода создают одинаковый объект:
                        var menuSetup = {
                                width: 300,
                                height: 200,
                                title: "Menu"
                        };

                                // то же самое, что:

                        var menuSetup = {};
                        menuSetup.width = 300;
                        menuSetup.height = 200;
                        menuSetup.title = 'Menu';
                
                Названия свойств можно перечислять как в кавычках, так и без, если они удовлетворяют ограничениям 
                для имён переменных.
                        var menuSetup = {
                                width: 300,
                                'height': 200,
                                "мама мыла раму": true
                        };

                В качестве значения можно тут же указать и другой объект:
                        var user = {
                                name: "Таня",
                                age: 25,
                                size: {
                                        top: 90,
                                        middle: 60,
                                        bottom: 90
                                }
                        }

                        alert(user.name) // "Таня"

                        alert(user.size.top) // 90

        Компактное представление объектов
                При создании множества объектов одного и того же вида (с одинаковыми полями) интерпретатор выносит описание полей 
                в отдельную структуру. А сам объект остаётся в виде непрерывной области памяти с данными.
                Например, есть много объектов с полями name и age:
                        {name: "Вася", age: 25}
                        {name: "Петя", age: 22}
                        {name: "Маша", age: 19}
                        ...
                Для их эффективного хранения будет создана структура, которая описывает данный вид объектов. Выглядеть она будет 
                примерно так: <string name, number age>. А сами объекты будут представлены в памяти только данными:
                        <структура: string name, number age>
                        Вася 25
                        Петя 22
                        Маша 19
                При добавлении нового объекта такой структуры достаточно хранить значения полей, но не их имена. 
                Экономия памяти – налицо.

                А что происходит, если к объекту добавляется новое свойство? Например, к одному из них добавили свойство isAdmin:
                        user.isAdmin = true;
                В этом случае браузер смотрит, есть ли уже структура, под которую подходит такой объект. Если нет – она создаётся и объект привязывается к ней.

