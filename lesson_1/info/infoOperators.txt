Основные операторы:
        Операнд – то, к чему применяется оператор. Например: 5 * 2 – оператор умножения с левым и правым операндами. 
        Другое название: «аргумент оператора».

        Унарным называется оператор, который применяется к одному операнду. Например, оператор унарный минус "-" меняет знак 
        числа на противоположный:
                var x = 1;
                x = -x;
                alert( x ); // -1, применили унарный минус

        Бинарным называется оператор, который применяется к двум операндам. Тот же минус существует и в бинарной форме:
                var x = 1, y = 3;
                alert( y - x ); // 2, бинарный минус
// ========================================================================================================= //   

        Сложение строк, бинарный +
                Обычно при помощи плюса '+' складывают числа.
                Но если бинарный оператор '+' применить к строкам, то он их объединяет в одну:
                        var a = "моя" + "строка";
                        alert( a ); // моястрока
                Иначе говорят, что «плюс производит конкатенацию (сложение) строк».

                Если хотя бы один аргумент является строкой, то второй будет также преобразован к строке!
                        alert( '1' + 2 ); // "12"
                        alert( 2 + '1' ); // "21"
                Это приведение к строке – особенность исключительно бинарного оператора "+".
                Остальные арифметические операторы работают только с числами и всегда приводят аргументы к числу.
                         alert( 2 - '1' ); // 1
                         alert( 6 / '2' ); // 3
// ========================================================================================================= //   

        Преобразование к числу, унарный плюс +
                Унарный, то есть применённый к одному значению, плюс ничего не делает с числами:
                        alert( +1 ); // 1
                        alert( +(1 - 2) ); // -1
                Его «побочный эффект» – преобразование значения в число.
                Поэтому используем унарный плюс, чтобы преобразовать к числу:
                        var apples = "2";
                        var oranges = "3";
                        alert( +apples + +oranges ); // 5, число, оба операнда предварительно преобразованы в числа

// ========================================================================================================= // 
        
        Приоритет операторов:
                Таблица приоритетов:
                https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
                
                        Приоритет	Название	Обозначение
                        …	…	…
                        15	унарный плюс	+
                        15	унарный минус	-
                        14	умножение	*
                        14	деление	/
                        13	сложение	+
                        13	вычитание	-
                        …	…	…
                        3	присваивание	=
                        …	…	…
// ========================================================================================================= // 

        Присваивание.
        оператор присваивания =.
                        var x = 2 * 2 + 1;
                        alert( x ); // 5
                Возможно присваивание по цепочке:
                        var a, b, c;
                        a = b = c = 2 + 2;
                        alert( a ); // 4
                        alert( b ); // 4
                        alert( c ); // 4

                Оператор "=" возвращает значение
                        var a = 1;
                        var b = 2;
                        var c = 3 - (a = b + 1);
                        alert( a ); // 3
                        alert( c ); // 0
        // ========================================================================================================= // 

        Взятие остатка %
                Оператор взятия остатка % интересен тем, что, несмотря на обозначение, никакого отношения к процентам не имеет.
                Его результат a % b – это остаток от деления a на b.
                        alert( 5 % 2 ); // 1, остаток от деления 5 на 2
                        alert( 8 % 3 ); // 2, остаток от деления 8 на 3
                        alert( 6 % 3 ); // 0, остаток от деления 6 на 3
        // ========================================================================================================= // 

        Инкремент/декремент: ++, --
                Инкремент ++ увеличивает на 1:
                        var i = 2;
                        i++;      // более короткая запись для i = i + 1.
                        alert(i); // 3

                Декремент -- уменьшает на 1:
                        var i = 2;
                        i--;      // более короткая запись для i = i - 1.
                        alert(i); // 1
                
                Вызывать эти операторы можно не только после, но и перед переменной: i++ (называется «постфиксная форма») 
                или ++i («префиксная форма»).
                Обе эти формы записи делают одно и то же: увеличивают на 1.

                Тем не менее, между ними существует разница. Она видна только в том случае, когда мы хотим не только 
                увеличить/уменьшить переменную, но и использовать результат в том же выражении.
                        var i = 1;
                        var a = ++i; // (*)
                        alert(a); // 2
                В строке (*) вызов ++i увеличит переменную, а затем вернёт ее значение в a. Так что в a попадёт значение i после увеличения.

                Постфиксная форма i++ отличается от префиксной ++i тем, что возвращает старое значение, бывшее до увеличения.
                В примере ниже в a попадёт старое значение i, равное 1:
                        var i = 1;
                        var a = i++; // (*)
                        alert(a); // 1

                Если результат оператора не используется, а нужно только увеличить/уменьшить переменную – без разницы, 
                какую форму использовать: 
                        var i = 0;
                        i++;
                        ++i;
                        alert( i ); // 2
                
                Если хочется тут же использовать результат, то нужна префиксная форма:
                        var i = 0;
                        alert( ++i ); // 1
                
                Если нужно увеличить, но нужно значение переменной до увеличения – постфиксная форма:
                        var i = 0;
                        alert( i++ ); // 0
                

                Инкремент/декремент можно использовать в любых выражениях
                При этом он имеет более высокий приоритет и выполняется раньше, чем арифметические операции:
                        var i = 1;
                        alert( 2 * ++i ); // 4

                        var i = 1;
                        alert( 2 * i++ ); // 2,  выполнился раньше но значение вернул старое
                        alert( i ); // 2
                        alert( 2 * i++ ); // 4
                        alert( i ); // 3

// ========================================================================================================= // 

Побитовые операторы:
        Побитовые операторы рассматривают аргументы как 32-разрядные целые числа и работают на уровне их внутреннего 
        двоичного представления.
        Поддерживаются следующие побитовые операторы:
                AND(и) ( & )
                OR(или) ( | )
                XOR(побитовое исключающее или) ( ^ )
                NOT(не) ( ~ )
                LEFT SHIFT(левый сдвиг) ( << )RIGHT SHIFT(правый сдвиг) ( >> )
                ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )

        https://learn.javascript.ru/bitwise-operators
// ========================================================================================================= // 
        
Сокращённая арифметика с присваиванием

                var n = 2;
                n = n + 5;
                n = n * 2;
                Эту запись можно укоротить при помощи совмещённых операторов, вот так:
                var n = 2;
                n += 5; // теперь n=7 (работает как n = n + 5)
                n *= 2; // теперь n=14 (работает как n = n * 2)
                alert( n ); // 14

                Так можно сделать для операторов +,-,*,/,% и бинарных <<,>>,>>>,&,|,^.
// ========================================================================================================= // 

Оператор запятая
        Один из самых необычных операторов – запятая ','.
                var a = (5, 6);
                alert( a ); // 6
        Запятая позволяет перечислять выражения, разделяя их запятой ','. Каждое из них – вычисляется и отбрасывается, 
        за исключением последнего, которое возвращается.

        Запятая – единственный оператор, приоритет которого ниже присваивания. В выражении a = (5, 6) для явного задания 
        приоритета использованы скобки, иначе оператор '=' выполнился бы до запятой ',', получилось бы (a=5), 6.

        Обычно он используется в составе более сложных конструкций, чтобы сделать несколько действий в одной строке:
                // три операции в одной строке
                for (a = 1, b = 3, c = a*b; a < 10; a++) {
                        ...
                }
// ========================================================================================================= // 